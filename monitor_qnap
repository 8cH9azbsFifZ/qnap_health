#!/usr/bin/env bash
#
# monitor_qnap : mato [10-oct-2017]
#
# Check on a QNAP NAS appliance via SMTP
#

usage()
{
	echo "usage: ${0##*/} [<arg>...] host" >&2
	echo >&2
	echo "where: host -- QNAP server network name / address" >&2
	echo >&2
	echo "       --all    -- get all available metrics" >&2
	echo "       --cpu    -- get all cpu-* metrics" >&2
	echo "       --disk   -- get all disk-* metrics" >&2
	echo "       --memory -- get all memory-* metrics" >&2
	echo "       --uptime -- get all uptime-* metrics" >&2
	echo "       --volume -- get all volume-* metrics" >&2
	echo >&2
	echo "       -V|--snmp      -- SNMP protocol version to use (1, 2c, 3); default: 3" >&2
	echo "       -A|--snmp-auth -- security name (v.3) or community name (v.1/2c)" >&2
	echo "       -v|--verbose   -- verbose output" >&2
	exit 100
}

getopt --test > /dev/null
if [ $? -ne 4 ]
then
	echo "ERROR: enhanced getopt from util-linux required" >&2
	exit 101
fi

OPTIONS="A:V:v?"
LONGOPTIONS="interval:,loop,snmp:,snmp-auth:,verbose"
LONGOPTIONS="$LONGOPTIONS,all,cpu,cpu-busy,cpu-temp"
LONGOPTIONS="$LONGOPTIONS,disk,disk-size,disk-status,disk-temp"
LONGOPTIONS="$LONGOPTIONS,memory,memory-free,memory-total,memory-used"
LONGOPTIONS="$LONGOPTIONS,uptime,uptime-network,uptime-system"
LONGOPTIONS="$LONGOPTIONS,volume,volume-free,volume-total,volume-used"

PARSED="$(getopt -o "$OPTIONS" -l "$LONGOPTIONS" -n "$0" -- "$@")"
[ $? -ne 0 ] && usage
eval set -- "$PARSED"

loop=false
protocol="3"
secstropt="-u"
verbose=0

while true
do
	case "$1" in
		--all)
			do_all=1 ; shift ;;
		--cpu)
			do_cpu=1 ; shift ;;
		--cpu-busy)
			do_cpu_busy=1 ; shift ;;
		--cpu-temp)
			do_cpu_temp=1 ; shift ;;
		--disk)
			do_disk=1 ; shift ;;
		--disk-size)
			do_disk_size=1 ; shift ;;
		--disk-status)
			do_disk_status=1 ; shift ;;
		--disk-temp)
			do_disk_temp=1 ; shift ;;
		--memory)
			do_memory=1 ; shift ;;
		--memory-free)
			do_memory_free=1 ; shift ;;
		--memory-total)
			do_memory_total=1 ; shift ;;
		--memory-used)
			do_memory_used=1 ; shift ;;
		--uptime)
			do_uptime=1 ; shift ;;
		--uptime-network)
			do_uptime_network=1 ; shift ;;
		--uptime-system)
			do_uptime_system=1 ; shift ;;
		--volume)
			do_volume=1 ; shift ;;
		--volume-free)
			do_volume_free=1 ; shift ;;
		--volume-total)
			do_volume_total=1 ; shift ;;
		--volume-used)
			do_volume_used=1 ; shift ;;

		# --------------------
		--interval)
			interval="$2"
			shift 2
			;;
		--loop)
			loop=true
			shift
			;;
		-V|--snmp)
			protocol="$2"
			case "$protocol" in
				3)
					secstropt="-u"
					;;
				2c|1)
					secstropt="-c"
					;;
				*)
					echo "ERROR: wrong protocol version" >&2
					exit 100
					;;
			esac
			shift 2
			;;
		-A|--snmp-auth)
			secstrval="$2"
			shift 2
			;;
		-v|--verbose)
			verbose=$((verbose+1))
			shift
			;;
		-\?)
			usage
			;;
		--)
			shift
			break
			;;
		*)
			echo "ERROR!" >&2
			exit 123
			;;
	esac
done

[ $# -ne 1 ] && usage

host="$1"

_snmpget() {
	snmpget -v $protocol $secstropt "$secstrval" "$host" "$@"
}

_snmpgetval() {
	snmpget -v $protocol $secstropt "$secstrval" -Oqv "$host" "$@"
}

_snmpstatus() {
	snmpstatus -v $protocol $secstropt "$secstrval" "$host" "$@"
}

get_exp()	# return base 2 exponent matching unit passed in $1
{
	case "$1" in
		PB)	echo "50" ;;
		TB)	echo "40" ;;
		GB)	echo "30" ;;
		MB)	echo "20" ;;
		KB)	echo "10" ;;
		'')	echo "0" ;;
		*)	echo "ERROR: unknown unit '$1'" ;;
	esac
}

get_base_size()	# $1 - size including unit (e.g. "123 MB")
{
	local size="$(echo "$1" | sed -E 's/"([0-9.]+) ?.?B"/\1/')"
	local unit="$(echo "$1" | sed -E 's/"[0-9.]+ ?(.?B)"/\1/')"
	local exp="$(get_exp "$unit")"
	local base="$(echo "scale=0; $size*(2^$exp)" | bc -l)"
	echo "$base"
}

qnap_interval_to_seconds()	# $1 - datetime interval in the format days:hours:minutes:seconds
{
	echo "$1" | sed -E 's/([0-9]+):([0-9]+):([0-9]+):([0-9.]+)/\1*24*60*60 + \2*60*60 + \3*60 + \4/' | bc -l
}

export_values()	# $1 - node, $2 - value
{
	prefix=qnap
	echo "$prefix.$host.$1 $(date '+%s') $2"
}

do_cpu_busy()
{
	local val="$(_snmpgetval .1.3.6.1.4.1.24681.1.2.1.0 | sed -E 's/"([0-9.]+) ?%"/\1/')"
	export_values cpu.cpu-busy "$val"
}

do_cpu_temp()
{
	local val="$(_snmpgetval .1.3.6.1.4.1.24681.1.2.5.0 | sed -E 's/"([0-9.]+) ?C.*/\1/')"
	export_values cpu.cpu-temp "$val"
}

get_disk_count()
{
	echo "$(_snmpgetval .1.3.6.1.4.1.24681.1.2.10.0)"
}

get_disk_smart_info()	# $1 - disk number
{
	echo "$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.11.1.7.$1" | sed -E 's/^"(.*)"$/\1/')"
}

get_disk_status()	# $1 - disk number
{
	echo "$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.11.1.4.$1" | sed -E 's/^"(.*)"$/\1/')"
}

do_disk_status()
{
	for (( i=1; i <= "$(get_disk_count)"; i++ ))
	do
		export_values "disk-$i.disk-status" "$(get_disk_status "$i")"
	done
}

get_disk_size()	# $1 - disk number
{
	local str="$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.11.1.6.$1")"
	echo "$(get_base_size "$str")"
}

do_disk_size()
{
	for (( i=1; i <= "$(get_disk_count)"; i++ ))
	do
		if [ "$(get_disk_smart_info "$i")" != '--' ]
		then
			export_values "disk-$i.disk-size" "$(get_disk_size "$i")"
		fi
	done
}

get_disk_temp()	# $1 - disk number
{
	local str="$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.11.1.3.$1")"
	local val="$(echo "$str" | sed -E 's/"([0-9.]+) ?C.*/\1/')"
	echo "$val"
}

do_disk_temp()
{
	for (( i=1; i <= "$(get_disk_count)"; i++ ))
	do
		if [ "$(get_disk_smart_info "$i")" != '--' ]
		then
			export_values "disk-$i.disk-temp" "$(get_disk_temp "$i")"
		fi
	done
}
get_memory_free()
{
	local str="$(_snmpgetval .1.3.6.1.4.1.24681.1.2.3.0)"
	echo "$(get_base_size "$str")"
}

do_memory_free()
{
	export_values memory.memory-free "$(get_memory_free)"
}

get_memory_total()
{
	local str="$(_snmpgetval .1.3.6.1.4.1.24681.1.2.2.0)"
	echo "$(get_base_size "$str")"
}

do_memory_total()
{
	export_values memory.memory-total "$(get_memory_total)"
}

do_memory_used()
{
	local f="$(get_memory_free)"
	local t="$(get_memory_total)"
	local u="$(echo "scale=0; $t - $f" | bc -l)"
	local p="$(echo "scale=0; $u * 100 / $t" | bc -l)"
	export_values memory.memory-used "$u"
	export_values memory.memory-used-percent "$p"
}

do_uptime_network()
{
	local str="$(_snmpgetval .1.3.6.1.2.1.1.3.0)"
	local sec="$(qnap_interval_to_seconds "$str")"
	export_values uptime.network "$sec"
}

do_uptime_system()
{
	local str="$(_snmpgetval .1.3.6.1.2.1.25.1.1.0)"
	local sec="$(qnap_interval_to_seconds "$str")"
	export_values uptime.system "$sec"
}

do_uptime()
{
	do_uptime_system
	do_uptime_network
}

get_volume_count()
{
	echo "$(_snmpgetval .1.3.6.1.4.1.24681.1.2.16.0)"
}

get_volume_status()	# $1 - volume number
{
	echo "$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.17.1.6.$1" | sed -E 's/^"(.*)"$/\1/')"
}

get_volume_free()	# $1 - volume number
{
	local str="$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.17.1.5.$1")"
	echo "$(get_base_size "$str")"
}

do_volume_free()
{
	for (( i=1; i <= "$(get_volume_count)"; i++ ))
	do
		if [ "$(get_volume_status "$i")" = 'Ready' ]
		then
			export_values "volume-$i.volume-free" "$(get_volume_free "$i")"
		fi
	done
}

get_volume_total()	# $1 - volume number
{
	local str="$(_snmpgetval ".1.3.6.1.4.1.24681.1.2.17.1.4.$1")"
	echo "$(get_base_size "$str")"
}

do_volume_total()
{
	for (( i=1; i <= "$(get_volume_count)"; i++ ))
	do
		if [ "$(get_volume_status "$i")" = 'Ready' ]
		then
			export_values "volume-$i.volume-total" "$(get_volume_total "$i")"
		fi
	done
}

do_volume_used()
{
	for (( i=1; i <= "$(get_volume_count)"; i++ ))
	do
		if [ "$(get_volume_status "$i")" = 'Ready' ]
		then
			local f="$(get_volume_free "$i")"
			local t="$(get_volume_total "$i")"
			local u="$(echo "scale=0; $t - $f" | bc -l)"
			local p="$(echo "scale=0; $u * 100 / $t" | bc -l)"
			export_values "volume-$i.volume-used" "$u"
			export_values "volume-$i.volume-used-percent" "$p"
		fi
	done
}

run_once()
{
	# Check if the target is reachable and answers to SNMP
	status="$(_snmpstatus 2>&1)"
	if [ $? -ne 0 ]
	then
		echo "$status" >&2
		exit 1
	fi

	[ -n "$do_cpu_busy" -o -n "$do_cpu" -o -n "$do_all" ] && do_cpu_busy
	[ -n "$do_cpu_temp" -o -n "$do_cpu" -o -n "$do_all" ] && do_cpu_temp
	[ -n "$do_disk_size" -o -n "$do_disk" -o -n "$do_all" ] && do_disk_size
	[ -n "$do_disk_status" -o -n "$do_disk" -o -n "$do_all" ] && do_disk_status
	[ -n "$do_disk_temp" -o -n "$do_disk" -o -n "$do_all" ] && do_disk_temp
	[ -n "$do_memory_free" -o -n "$do_memory" -o -n "$do_all" ] && do_memory_free
	[ -n "$do_memory_total" -o -n "$do_memory" -o -n "$do_all" ] && do_memory_total
	[ -n "$do_memory_used" -o -n "$do_memory" -o -n "$do_all" ] && do_memory_used
	[ -n "$do_uptime_system" -o -n "$do_uptime" -o -n "$do_all" ] && do_uptime_system
	[ -n "$do_uptime_network" -o -n "$do_uptime" -o -n "$do_all" ] && do_uptime_network
	[ -n "$do_volume_free" -o -n "$do_volume" -o -n "$do_all" ] && do_volume_free
	[ -n "$do_volume_total" -o -n "$do_volume" -o -n "$do_all" ] && do_volume_total
	[ -n "$do_volume_used" -o -n "$do_volume" -o -n "$do_all" ] && do_volume_used
}

if $loop
then
	echo "NOT IMPLEMENTED YET"
	exit 1

	HOSTNAME="${COLLECTD_HOSTNAME:-localhost}"
	INTERVAL="${interval:-${COLLECTD_INTERVAL:-60}}"

	while sleep "$INTERVAL"
	do
		# VALUE=do_magic()
		echo "PUTVAL \"$HOSTNAME/exec-magic/gauge-magic_level\" interval=$INTERVAL N:$VALUE"
	done
else
	run_once
fi

exit 0

#
